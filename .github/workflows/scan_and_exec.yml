name: scan-and-exec

on:
  schedule:
    - cron: "*/4 * * * *"
  workflow_dispatch:
    inputs:
      ignore_regime:
        description: "Set 1 to bypass BTC regime"
        required: false
        default: "1"

permissions:
  contents: write

concurrency:
  group: scan-and-exec-${{ github.ref }}
  cancel-in-progress: false

env:
  PYTHONUNBUFFERED: "1"
  BINANCE_BASE_URL: "https://data-api.binance.vision"

  # Relaxed defaults for quiet markets (override via dispatch/env as needed)
  RELAXED_SIGNALS: "1"
  IGNORE_REGIME: "1"
  RELAX_B_HIGH: "0"
  BREAK_BUFFER_ATR: "0.02"
  VOL_Z_MIN_BREAK: "0.7"
  VOL_Z_MIN_PRE: "0.5"
  PROX_ATR_MIN: "0.00"
  PROX_ATR_MAX: "1.0"
  MIN_AVG_VOL: "1000"
  STOP_ATR_BUFFER: "0.4"
  MIN_RISK_FLOOR_PCT: "0.008"
  MAX_RISK_CAP_PCT: "0.05"
  MAX_WORKERS: "12"
  LOG_LEVEL: "INFO"
  ALLOW_MIN_ORDER: "1"   # enable fallback
  MIN_ORDER_USD:  "6"    # at least $6 notional (>= exchange min)

jobs:
  run:
    runs-on: [self-hosted]
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests python-binance numpy

      - name: Ensure output dirs
        run: mkdir -p public_runs/latest state

      # ---------- ANALYSES ----------
      - name: Run analyses (deep, USDC)
        run: |
          set -euo pipefail
          IGN_INPUT="${{ github.event.inputs.ignore_regime || '' }}"
          IGN="${IGNORE_REGIME}"
          if [ -n "${IGN_INPUT}" ]; then IGN="${IGN_INPUT}"; fi
          ARGS="--mode deep"
          if [ "${IGN}" = "1" ]; then ARGS="$ARGS --ignore_regime"; fi
          echo "[analyses] ARGS: $ARGS"
          python -m scripts.analyses $ARGS
          test -s public_runs/latest/summary.json
          python - <<'PY'
          import json
          p=json.load(open('public_runs/latest/summary.json'))
          uni=p.get("universe",{})
          print("signals:", p.get("signals"),
                "| regime:", p.get("regime"),
                "| scanned:", uni.get("scanned"),
                "| eligible:", uni.get("eligible"),
                "| cands:", len(p.get("candidates",[])),
                "| orders:", len(p.get("orders",[])))
          # safe: only prints if present
          if p.get("meta",{}).get("near_misses"):
              print("Near-misses:", p["meta"]["near_misses"])
          PY
