name: scan-and-exec

on:
  schedule:
    - cron: "*/4 * * * *"       # primary: every 4 minutes
    - cron: "2-59/4 * * * *"    # backup: same cadence, +2 min offset
  workflow_dispatch:
    inputs:
      ignore_regime:
        description: "Set 1 to bypass BTC regime"
        required: false
        default: "1"

permissions:
  contents: write

concurrency:
  group: scan-and-exec-${{ github.ref }}
  cancel-in-progress: true       # avoid overlapping when backup fires

env:
  PYTHONUNBUFFERED: "1"
  BINANCE_BASE_URL: https://data-api.binance.vision

  # ---------- Analyses defaults (tighter, but relaxed path enabled) ----------
  RELAXED_SIGNALS: "1"
  REQUIRE_LOWER_TF_OK: "1"
  IGNORE_REGIME: "1"             # can be overridden by dispatch input
  RELAX_B_HIGH: "0"              # confirm break with close (not just high)
  BREAK_BUFFER_ATR: "0.03"
  VOL_Z_MIN_PRE: "0.8"
  VOL_Z_MIN_BREAK: "1.0"
  PROX_ATR_MIN: "0.00"
  PROX_ATR_MAX: "0.60"
  MIN_AVG_VOL: "1500"
  STOP_ATR_BUFFER: "0.40"
  MIN_RISK_FLOOR_PCT: "0.008"
  MAX_RISK_CAP_PCT: "0.05"
  MAX_WORKERS: "12"
  LOG_LEVEL: "INFO"
  NEAR_MISS_LOG_COUNT: "5"

  # ---------- Exec-bot defaults (risk & protection) ----------
  # live trading + $400 sizing cap
  DRY_RUN: "0"
  FORCE_EQUITY_USD: "400"
  QUOTE_ASSET: "USDC"
  RISK_PCT: "0.012"              # 1.2% risk per position baseline

  # candidates
  TRADE_CANDIDATES: "1"
  C_RISK_MULT: "0.5"             # half-risk for candidates

  # order/precision helpers
  ALLOW_MIN_ORDER: "1"
  MIN_ORDER_USD: "6"
  STOP_LIMIT_OFFSET: "0.002"     # +0.2% above entry for stop-limit BUY
  PRICE_SLIPPAGE: "0.002"        # 0.2% cushion on virtual stop activations

  # portfolio/ops guards
  MAX_OPEN_POSITIONS: "2"
  PROMOTE_PENDING_AFTER_MIN: "8"   # pending promoted to market after 8m if through price
  CANCEL_STALE_PENDING_MIN: "45"   # cancel pendings after 45m
  CUT_LOSS_MIN: "60"               # cut losers after 60m if underwater
  CUT_LOSS_PCT: "0.01"             # -1% vs entry triggers the time-based cut
  BE_PROFIT_ATR: "0.8"             # move to breakeven (virtual) after +0.8 ATR

jobs:
  run:
    runs-on: [self-hosted]
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests python-binance numpy

      - name: Ensure output dirs
        run: mkdir -p public_runs/latest state

      # ---------- ANALYSES ----------
      - name: Run analyses (deep, USDC)
        run: |
          set -euo pipefail
          IGN_INPUT="${{ github.event.inputs.ignore_regime || '' }}"
          IGN="${IGNORE_REGIME}"
          if [ -n "${IGN_INPUT}" ]; then IGN="${IGN_INPUT}"; fi
          ARGS="--mode deep"
          if [ "${IGN}" = "1" ]; then ARGS="$ARGS --ignore_regime"; fi
          echo "Running analyses with ARGS: $ARGS"
          python -m scripts.analyses $ARGS
          test -s public_runs/latest/summary.json
          python - <<'PY'
          import json
          p=json.load(open('public_runs/latest/summary.json'))
          uni=p.get("universe",{})
          print("signals:", p.get("signals"),
                "| regime:", p.get("regime"),
                "| scanned:", uni.get("scanned"),
                "| eligible:", uni.get("eligible"),
                "| cands:", len(p.get("candidates",[])),
                "| orders:", len(p.get("orders",[])))
          nm = p.get("meta",{}).get("near_misses")
          if nm:
              print("Near-misses (top):", nm)
          PY

      # ---------- EXECUTE BEFORE ANY GIT OPS ----------
      - name: Run exec bot on fresh local summary
        env:
          BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
          BINANCE_API_SECRET: ${{ secrets.BINANCE_API_SECRET }}
          SUMMARY_URL: "file://${{ github.workspace }}/public_runs/latest/summary.json"
        run: |
          set -euo pipefail
          if grep -qE '^(<<<<<<<|=======|>>>>>>>)' public_runs/latest/summary.json; then
            echo "ERROR: summary.json has merge markers. Aborting exec."
            sed -n '1,160p' public_runs/latest/summary.json || true
            exit 1
          fi
          python exec_bot.py

      # ---------- COMMIT SCAN ARTIFACTS ----------
      - name: Commit public_runs
        run: |
          set -euo pipefail
          git config --global safe.directory "$GITHUB_WORKSPACE"
          git config user.name  "bincrypare-bot"
          git config user.email "bot@users.noreply.github.com"
          git config --global pull.rebase false

          git add public_runs
          if git diff --cached --quiet; then
            echo "No public_runs changes."
          else
            git commit -m "scan: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          fi

          git fetch origin main || true
          git merge -X ours --no-edit origin/main || true
          if [ -e .git/MERGE_HEAD ]; then
            git checkout --ours public_runs/latest/summary.json || true
            git add public_runs/latest/summary.json || true
            git commit -m "merge(resolved with -X ours for summary): $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || true
          fi
          git push origin HEAD:main || true

      # ---------- COMMIT STATE ONLY ----------
      - name: Persist state
        run: |
          set -euo pipefail
          git config --global safe.directory "$GITHUB_WORKSPACE"
          git config user.name  "bincrypare-bot"
          git config user.email "bot@users.noreply.github.com"
          git config --global pull.rebase false

          if [ -f state/open_positions.json ]; then
            if grep -qE '^(<<<<<<<|=======|>>>>>>>)' state/open_positions.json; then
              echo "Conflict in state file; using ours."
              git checkout --ours state/open_positions.json || true
            fi

            git add state/open_positions.json
            if git diff --cached --quiet; then
              echo "No state changes."
            else
              git commit -m "state: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            fi

            git fetch origin main || true
            git merge -X ours --no-edit origin/main || true
            if [ -e .git/MERGE_HEAD ]; then
              git checkout --ours state/open_positions.json || true
              git add state/open_positions.json || true
              git commit -m "merge(state resolved with -X ours): $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || true
            fi

            git push origin HEAD:main || true
          else
            echo "No state file to persist."
          fi