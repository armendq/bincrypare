name: build

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas requests python-dateutil
          fi

      - name: Generate mapping (safe)
        run: |
          if [ -f scripts/mapping.py ]; then
            python scripts/mapping.py
          else
            echo "skip mapping"
          fi

      - name: Run analyses
        env:
          EQUITY: ${{ vars.EQUITY || '41000' }}
          CASH:   ${{ vars.CASH   || '32000' }}
        run: |
          python -m scripts.analyses

      - name: Prepare public_runs/latest
        run: |
          set -e
          mkdir -p public_runs/latest
          for f in summary.json signals.json run_stats.json market_snapshot.json debug_scan.json; do
            [ -f "public_runs/latest/$f" ] && continue
            [ -f "artifacts/$f" ] && cp -f "artifacts/$f" "public_runs/latest/$f" || true
            [ -f "data/$f" ] && cp -f "data/$f" "public_runs/latest/$f" || true
          done
          if [ ! -f public_runs/latest/summary.json ]; then
            echo '{"status":"ok"}' > public_runs/latest/summary.json
          fi
          touch public_runs/.nojekyll
          find public_runs -mindepth 1 -maxdepth 1 -type d ! -name latest -exec rm -rf {} + || true
          echo "Tree to publish:" && ls -R public_runs

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./public_runs
          force_orphan: true

      - name: Verify raw gh-pages (bypass Pages)
        run: |
          set -e
          RAW_URL="https://raw.githubusercontent.com/${{ github.repository }}/gh-pages/latest/summary.json?ts=$(date +%s)"
          echo "Checking $RAW_URL"
          for i in $(seq 1 10); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$RAW_URL")
            echo "Attempt $i: HTTP $code"
            [ "$code" = "200" ] && exit 0
            sleep 3
          done
          echo "Raw gh-pages not reachable"
          exit 1

      - name: Verify Pages endpoint (retry up to ~3 min)
        run: |
          set -e
          URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/latest/summary.json?ts=$(date +%s)"
          echo "Checking $URL"
          for i in $(seq 1 18); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            echo "Attempt $i: HTTP $code"
            [ "$code" = "200" ] && exit 0
            sleep 10
          done
          echo "Pages still not serving summary.json"
          exit 1
```0