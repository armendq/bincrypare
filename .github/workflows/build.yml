name: run

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'public_runs/**'
      - '.github/workflows/build.yaml'
  schedule:
    # every 5 minutes -> light-fast
    - cron: '*/5 * * * *'
    # every 30 minutes -> deep (00 and 30)
    - cron: '0,30 * * * *'
    # hourly at :02 -> light-hourly
    - cron: '2 * * * *'

permissions:
  contents: write          # commit public_runs and read repo
  pages: write             # deploy to GitHub Pages
  id-token: write          # required by pages deploy

concurrency:
  group: 'pages'
  cancel-in-progress: false

env:
  PYTHONUNBUFFERED: '1'
  PAGES_URL: 'https://armendq.github.io/revolut_crypto_mapping/'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: pip-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        if: hashFiles('requirements.txt') != ''
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure output tree
        run: |
          mkdir -p public_runs/latest
          echo "Tree OK"

      - name: Generate Revolut ↔ Binance mapping
        run: |
          set -e
          echo "[mapping] generating…"
          python scripts/generate_mapping.py
          echo "[mapping] done"

      # -------- Cadence router --------
      - name: Decide run mode (deep / light-fast / light-hourly)
        id: mode
        shell: bash
        run: |
          set -euo pipefail
          MINUTE=$(date -u +%M)   # route on UTC minute
          if (( MINUTE % 30 == 0 )); then
            MODE=deep
          elif (( MINUTE % 5 == 0 )); then
            MODE=light-fast
          elif (( MINUTE == 02 )); then
            MODE=light-hourly
          else
            MODE=skip
          fi
          echo "Selected mode: ${MODE} (UTC minute=${MINUTE})"
          echo "mode=${MODE}" >> "$GITHUB_OUTPUT"

      - name: Skip if no matching cadence
        if: steps.mode.outputs.mode == 'skip'
        run: echo "No matching cadence for this trigger; exiting."

      # -------- Analyses per mode --------
      - name: Run analyses (deep)
        if: steps.mode.outputs.mode == 'deep'
        run: |
          echo "[router] Running DEEP analyses"
          python scripts/analyses.py --mode deep

      - name: Run analyses (light-fast, ~every 5m)
        if: steps.mode.outputs.mode == 'light-fast'
        run: |
          echo "[router] Running LIGHT-FAST analyses"
          python scripts/analyses.py --mode light-fast

      - name: Run analyses (light-hourly at :02)
        if: steps.mode.outputs.mode == 'light-hourly'
        run: |
          echo "[router] Running LIGHT-HOURLY analyses"
          python scripts/analyses.py --mode light-hourly

      # -------- Commit any new public_runs artifacts --------
      - name: Commit public_runs to main
        run: |
          set -e
          if [[ -n "$(git status --porcelain public_runs)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add public_runs
            git commit -m "Update public_runs ($(date -u +'%Y-%m-%d %H:%M:%S') UTC)"
            git push
          else
            echo "No changes to commit."
          fi

      # -------- GitHub Pages publish pipeline --------
      - name: Configure Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./

      - name: Deploy to gh-pages
        id: deployment
        uses: actions/deploy-pages@v4

      # -------- Non-blocking endpoint verification --------
      - name: Verify Pages endpoint (non-blocking)
        continue-on-error: true
        run: |
          URL="${PAGES_URL}"
          echo "Checking ${URL}"
          curl -L -s -o /dev/null -w "%{http_code}\n" "${URL}" || true