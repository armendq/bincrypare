name: build

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "*/15 * * * *"   # every 15 minutes
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # ---- Your project steps (safe to keep as-is) ----
      - name: Generate mapping (safe)
        run: |
          set -e
          if [ -f scripts/generate_mapping.py ]; then
            python scripts/generate_mapping.py
          else
            echo "scripts/generate_mapping.py not found; skipping"
          fi

      - name: Run analyses
        run: |
          set -e
          if [ -f scripts/analyses.py ] || python -c "import importlib; importlib.import_module('scripts.analyses')" 2>/dev/null; then
            python -m scripts.analyses
          else
            echo "scripts/analyses module not found; skipping"
          fi

      - name: Prepare public_runs/latest
        run: |
          set -e
          mkdir -p public_runs/latest

      - name: Build summary.json
        run: |
          set -e
          if [ -f scripts/build_summary.py ]; then
            python scripts/build_summary.py
          else
            echo '{"status":"ok"}' > public_runs/latest/summary.json
            echo "scripts/build_summary.py not found; wrote placeholder summary.json"
          fi

      - name: Verify outputs exist
        run: |
          set -e
          test -f public_runs/latest/summary.json

      - name: Clean old public_runs folders (keep latest)
        run: |
          set -e
          if [ -d public_runs ]; then
            find public_runs -mindepth 1 -maxdepth 1 -type d ! -name latest -exec rm -rf {} +
          fi

      # ---- FIXED: no rebase, just commit & force-push safely ----
      - name: Commit changes to main (force-safe)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "ci: update analyses outputs [skip ci]"
          git push origin HEAD:main --force

      # ---- Publish to gh-pages ----
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: public_runs
          force_orphan: true

      # ---- Non-fatal verification of the Pages endpoint ----
      - name: Verify Pages endpoint
        run: |
          set -e
          url="https://armendq.github.io/revolut_crypto_mapping/latest/summary.json?ts=$(date +%s)"
          echo "Checking $url"
          for i in 1 2 3 4 5; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            echo "HTTP $code"
            if [ "$code" = "200" ]; then
              exit 0
            fi
            sleep 5
          done
          echo "Pages may still be propagating; not failing the build."
          exit 0