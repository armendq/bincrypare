name: run

on:
  schedule:
    # Fire every 5 minutes; the script below does mode selection with tolerance.
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      force_mode:
        description: 'Override mode: deep | light-hourly | light-fast | skip | auto'
        required: false
        default: 'auto'

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Post Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # ---------- DECIDE MODE WITH TOLERANCE ----------
      - name: Decide run mode (deep / light-fast / light-hourly)
        id: decide
        shell: bash
        run: |
          set -euo pipefail

          FORCE="${{ github.event.inputs.force_mode || '' }}"

          # Manual override
          if [[ -n "${FORCE}" && "${FORCE}" != "auto" ]]; then
            echo "mode=${FORCE}" >> "$GITHUB_OUTPUT"
            echo "Override -> ${FORCE}"
            exit 0
          fi

          # Current UTC minute (00..59) as integer (no octal)
          M=$(date -u +%M); M=$((10#$M))

          within() { # within <minute> <target> [tol]
            local m=$1 t=$2 tol=${3:-1}
            local diff=$(( (m - t + 60) % 60 ))
            # close either direction (wraparound aware)
            [[ $diff -le $tol || $((60 - diff)) -le $tol ]]
          }

          MODE=""

          # Priority 1: DEEP every 15 minutes at :00/:15/:30/:45  (±1 min)
          for t in 0 15 30 45; do
            if within "$M" "$t" 1; then MODE="deep"; break; fi
          done

          # Priority 2: HOURLY light at :02 (±1 min)
          if [[ -z "$MODE" ]]; then
            if within "$M" 2 1; then MODE="light-hourly"; fi
          fi

          # Priority 3: FAST every 5 min boundaries (±1 min)
          if [[ -z "$MODE" ]]; then
            for t in 0 5 10 15 20 25 30 35 40 45 50 55; do
              if within "$M" "$t" 1; then MODE="light-fast"; break; fi
            done
          fi

          if [[ -z "$MODE" ]]; then
            MODE="skip"
          fi

          echo "mode=${MODE}" >> "$GITHUB_OUTPUT"
          echo "Selected mode: ${MODE} (UTC minute=${M})"

      - name: Skip if no matching cadence
        if: steps.decide.outputs.mode == 'skip'
        run: echo "No matching cadence (outside ±1 min windows); exiting."

      # ---------- YOUR ANALYSES CALLS ----------
      # Replace the commands below with your repo's actual entrypoints if different.
      - name: Run analyses (deep)
        if: steps.decide.outputs.mode == 'deep'
        run: |
          echo "[router] Running DEEP analyses"
          python -m scripts.analyses --mode deep

      - name: Run analyses (light-fast, every ~5m)
        if: steps.decide.outputs.mode == 'light-fast'
        run: |
          echo "[router] Running LIGHT-FAST analyses"
          python -m scripts.analyses --mode light-fast

      - name: Run analyses (light-hourly at :02)
        if: steps.decide.outputs.mode == 'light-hourly'
        run: |
          echo "[router] Running LIGHT-HOURLY analyses"
          python -m scripts.analyses --mode light-hourly

      # ---------- (optional) commit/deploy steps ----------
      # Keep whatever you already have; shown here as placeholders:
      # - name: Commit public_runs to main
      #   if: steps.decide.outputs.mode != 'skip'
      #   run: ./scripts/commit_public_runs.sh
      #
      # - name: Deploy to gh-pages
      #   if: steps.decide.outputs.mode != 'skip'
      #   run: ./scripts/deploy_pages.sh
