name: run

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:
    inputs:
      force_mode:
        description: "Override mode: deep | light-hourly | light-fast | skip | auto"
        required: false
        default: "auto"

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PYTHONUNBUFFERED: "1"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Ensure output tree (atomic dirs)
        run: |
          set -euo pipefail
          mkdir -p public_runs/latest
          mkdir -p mapping
          echo "Tree OK"

      - name: Generate Revolut ↔ Binance mapping (optional)
        run: |
          set -e
          if [ -f scripts/generate_mapping.py ]; then
            echo "[mapping] generating…"
            python scripts/generate_mapping.py
          else
            echo "[mapping] no generator found; skipping."
          fi

      - name: Decide run mode (deep / light-fast / light-hourly)
        id: decide
        shell: bash
        run: |
          set -euo pipefail
          FORCE="${{ github.event.inputs.force_mode || '' }}"
          if [[ -n "${FORCE}" && "${FORCE}" != "auto" ]]; then
            echo "mode=${FORCE}" >> "$GITHUB_OUTPUT"
            echo "Override -> ${FORCE}"
            exit 0
          fi
          M=$(date -u +%M); M=$((10#$M))
          within() { local m=$1 t=$2 tol=${3:-1}; local d=$(( (m - t + 60) % 60 )); [[ $d -le $tol || $((60-d)) -le $tol ]]; }
          MODE=""
          for t in 0 15 30 45; do if within "$M" "$t" 1; then MODE="deep"; break; fi; done
          if [[ -z "$MODE" ]] && within "$M" 2 1; then MODE="light-hourly"; fi
          if [[ -z "$MODE" ]]; then
            for t in 0 5 10 15 20 25 30 35 40 45 50 55; do
              if within "$M" "$t" 1; then MODE="light-fast"; break; fi
            done
          fi
          [[ -z "$MODE" ]] && MODE="skip"
          echo "mode=${MODE}" >> "$GITHUB_OUTPUT"
          echo "Selected mode: ${MODE} (UTC minute=${M})"

      - name: Skip if no matching cadence
        if: steps.decide.outputs.mode == 'skip'
        run: echo "No matching cadence window now; exiting."

      # ------------------ ANALYSES ------------------
      - name: Run analyses (deep)
        if: steps.decide.outputs.mode == 'deep'
        run: |
          set -euo pipefail
          echo "[router] Running DEEP analyses"
          python -m scripts.analyses --mode deep
          echo "[router] DEEP done"

      - name: Run analyses (light-fast, ~every 5m)
        if: steps.decide.outputs.mode == 'light-fast'
        run: |
          set -euo pipefail
          echo "[router] Running LIGHT-FAST analyses"
          python -m scripts.analyses --mode light-fast
          echo "[router] LIGHT-FAST done"

      - name: Run analyses (light-hourly at :02)
        if: steps.decide.outputs.mode == 'light-hourly'
        run: |
          set -euo pipefail
          echo "[router] Running LIGHT-HOURLY analyses"
          python -m scripts.analyses --mode light-hourly
          echo "[router] LIGHT-HOURLY done"

      # ------------------ VALIDATE OUTPUT ------------------
      - name: Validate summary.json exists and is valid JSON
        if: steps.decide.outputs.mode != 'skip'
        run: |
          set -euo pipefail
          FILE="public_runs/latest/summary.json"
          if [ ! -s "$FILE" ]; then
            echo "ERROR: $FILE missing or empty."
            ls -lah public_runs/latest || true
            exit 1
          fi
          # atomic write guard: ensure not partial JSON
          if ! jq -e . "$FILE" >/dev/null 2>&1; then
            echo "ERROR: $FILE is invalid JSON:"
            cat "$FILE" || true
            exit 1
          fi
          echo "summary.json looks good."

      - name: CRO presence smoke-check (non-fatal)
        if: always() && steps.decide.outputs.mode != 'skip'
        continue-on-error: true
        run: |
          set -euo pipefail
          # Adjust the grep path to whatever file lists supported tickers on Revolut.
          if [ -f mapping/revolut_supported.json ]; then
            if jq -r '.[]' mapping/revolut_supported.json | grep -qi