name: build

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}
  schedule:
    - cron: "*/15 * * * *"   # every 15 minutes

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # If you have a mapping step, keep it; otherwise it's a no-op.
      - name: Generate mapping (safe)
        run: |
          set -e
          python -m scripts.mapping || true

      - name: Run analyses
        run: |
          set -e
          python -m scripts.analyses

      - name: Verify outputs exist
        run: |
          set -e
          # Your analyses should write JSONs either into data/ or artifacts/
          ls -la || true
          ls -la data || true
          ls -la artifacts || true

      - name: Prepare public_runs/latest
        run: |
          set -e
          mkdir -p public_runs/latest

          # Copy from data/ if present
          for f in summary.json signals.json run_stats.json market_snapshot.json debug_scan.json; do
            if [ -f "data/$f" ]; then
              cp -f "data/$f" "public_runs/latest/$f"
            fi
          done

          # Fallback: copy from artifacts/ if present
          if ls artifacts/*.json >/dev/null 2>&1; then
            cp -f artifacts/*.json public_runs/latest/ || true
          fi

          # As a last resort, ensure summary.json exists (prevents 404s downstream)
          if [ ! -f public_runs/latest/summary.json ]; then
            echo '{"status":"ok"}' > public_runs/latest/summary.json
          fi

      - name: Validate JSON (summary)
        run: |
          set -e
          jq -e . public_runs/latest/summary.json >/dev/null

      - name: Clean old public_runs folders (keep latest)
        run: |
          set -e
          find public_runs -mindepth 1 -maxdepth 1 -type d ! -name latest -exec rm -rf {} + || true

      - name: Commit changes to main (conflict-safe)
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add -A
          git commit -m "ci: update analyses outputs [skip ci]" || echo "No changes to commit"

          # Rebase onto remote, prefer our generated files on conflicts
          git pull --rebase --strategy-option=theirs origin main || echo "No remote changes to rebase"
          git push origin main || echo "Push failed (likely no changes or race)"; exit 0

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: public_runs
          force_orphan: true

      # Pages can lag; verify but don't fail the job if it's still warming up.
      - name: Verify Pages endpoint
        continue-on-error: true
        run: |
          set -e
          url="https://armendq.github.io/revolut_crypto_mapping/latest/summary.json?ts=$(date +%s)"
          echo "Checking $url"
          ok=0
          for i in $(seq 1 10); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            echo "HTTP $code"
            if [ "$code" = "200" ]; then ok=1; break; fi
            sleep 6
          done
          if [ $ok -ne 1 ]; then
            echo "Warning: Pages not returning 200 yet (non-fatal)."
          fi