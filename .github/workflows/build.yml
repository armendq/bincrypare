name: build

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "*/15 * * * *"   # every 15 minutes
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install pandas requests python-dateutil; fi

      # Optional; safe no-op if script missing
      - name: Generate mapping (safe)
        run: |
          if [ -f scripts/mapping.py ]; then python scripts/mapping.py; else echo "skip mapping"; fi

      - name: Run analyses
        env:
          EQUITY: ${{ vars.EQUITY || '41000' }}
          CASH:   ${{ vars.CASH   || '32000' }}
        run: |
          python -m scripts.analyses

      - name: Prepare public_runs/latest
        run: |
          set -e
          mkdir -p public_runs/latest
          # If analyses already wrote there, fine. Otherwise copy from common dirs.
          for f in summary.json signals.json run_stats.json market_snapshot.json debug_scan.json; do
            [ -f "public_runs/latest/$f" ] && continue
            [ -f "artifacts/$f" ] && cp -f "artifacts/$f" "public_runs/latest/$f" || true
            [ -f "data/$f" ] && cp -f "data/$f" "public_runs/latest/$f" || true
          done
          # Hard guarantee summary.json exists to avoid 404s
          if [ ! -f public_runs/latest/summary.json ]; then
            echo '{"status":"ok"}' > public_runs/latest/summary.json
          fi

      - name: Clean old public_runs folders (keep latest)
        run: |
          find public_runs -mindepth 1 -maxdepth 1 -type d ! -name latest -exec rm -rf {} + || true

      - name: Commit to main (force-safe, no rebase)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A public_runs data artifacts || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "ci: publish public_runs/latest/summary.json [skip ci]"
          git push origin HEAD:main --force

      - name: Verify raw summary.json on main (retry)
        run: |
          set -e
          url="https://raw.githubusercontent.com/${{ github.repository }}/main/public_runs/latest/summary.json?ts=$(date +%s)"
          echo "Checking $url"
          for i in 1 2 3 4 5 6; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            echo "Attempt $i -> HTTP $code"
            if [ "$code" = "200" ]; then
              echo "OK"
              exit 0
            fi
            sleep 5
          done
          echo "Raw URL not reachable yet"
          exit 1