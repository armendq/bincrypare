name: scan-and-exec

on:
  schedule:
    - cron: "*/7 * * * *"   # every 7 minutes, avoids overlap
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: scan-and-exec-${{ github.ref }}
  cancel-in-progress: false

env:
  PYTHONUNBUFFERED: "1"

jobs:
  run:
    runs-on: [self-hosted]          # your Hetzner runner
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests python-binance

      # ---------- ANALYSES ----------
      - name: Ensure output dirs
        run: mkdir -p public_runs/latest

      - name: Run analyses (deep, USDC)
        env:
          VOL_Z_MIN_BREAK: "1.3"   # relaxed B
          BREAK_BUFFER_ATR: "0.04"
          RELAX_B_HIGH: "1"
        run: |
          set -euo pipefail
          python -m scripts.analyses --mode deep
          test -s public_runs/latest/summary.json
          python -c "import json; p=json.load(open('public_runs/latest/summary.json')); print('signals:', p.get('signals'), 'regime:', p.get('regime'))"

      # ---------- COMMIT SCAN ARTIFACTS ----------
      - name: Commit public_runs
        run: |
          set -euo pipefail
          git config --global safe.directory "$GITHUB_WORKSPACE"
          git config user.name  "bincrypare-bot"
          git config user.email "bot@users.noreply.github.com"

          # Stage new scan output and commit locally
          git add public_runs
          if git diff --cached --quiet; then
            echo "No public_runs changes."
          else
            git commit -m "scan: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          fi

          # Merge remote, always prefer our newly-generated files on conflicts
          git fetch origin main
          git merge -X ours --no-edit origin/main || true

          # Ensure no leftover merge state
          if [ -e .git/MERGE_HEAD ]; then
            git add -A
            git commit -m "merge(resolved with -X ours): $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || true
          fi

          git push origin HEAD:main || true

      # ---------- EXECUTOR ----------
      - name: Run exec bot on fresh local summary
        env:
          BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
          BINANCE_API_SECRET: ${{ secrets.BINANCE_API_SECRET }}
          DRY_RUN: "0"                 # 1=dry, 0=live
          FORCE_EQUITY_USD: "0"        # use live USDC
          QUOTE_ASSET: "USDC"
          TRADE_CANDIDATES: "1"        # trade C via stop-limit
          C_RISK_MULT: "0.5"           # candidates at half risk
          STOP_LIMIT_OFFSET: "0.001"   # +0.1% above entry
          SUMMARY_URL: "file://${{ github.workspace }}/public_runs/latest/summary.json"
        run: |
          set -euo pipefail
          python exec_bot.py

      # ---------- COMMIT STATE ONLY ----------
      - name: Persist state
        run: |
          set -euo pipefail
          git config --global safe.directory "$GITHUB_WORKSPACE"
          git config user.name  "bincrypare-bot"
          git config user.email "bot@users.noreply.github.com"

          # Only touch state file to avoid re-conflicting with public_runs
          if [ -f state/open_positions.json ]; then
            git add state/open_positions.json
            if git diff --cached --quiet; then
              echo "No state changes."
            else
              git commit -m "state: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            fi

            # Merge remote, keep our state on conflicts
            git fetch origin main
            git merge -X ours --no-edit origin/main || true
            if [ -e .git/MERGE_HEAD ]; then
              git add state/open_positions.json || true
              git commit -m "merge(state resolved with -X ours): $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || true
            fi

            git push origin HEAD:main || true
          else
            echo "No state file to persist."
          fi